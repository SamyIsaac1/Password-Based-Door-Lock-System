
ProjectSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  0000064e  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000d4  008000d4  00000756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f73  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000585  00000000  00000000  00001891  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007dc  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000378  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005be  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00003336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_10>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3d       	cpi	r26, 0xD4	; 212
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ed       	ldi	r26, 0xD4	; 212
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 31       	cpi	r26, 0x14	; 20
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  8a:	0c 94 25 03 	jmp	0x64a	; 0x64a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ExtEPROM_Write>:
#include <avr/io.h>
#include "I2C.h"

char ExtEPROM_Write(unsigned int addr,unsigned char data)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d6 2f       	mov	r29, r22
	// Sequence start, Write mode ,slave address ,send data, stop condition
	I2C_StartBit();
  9a:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_StartBit>
	if(I2C_GetStatus() != 0x08)  // ERROR
  9e:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	c9 f4       	brne	.+50     	; 0xd8 <ExtEPROM_Write+0x46>
	return 1;
	I2C_Write(0b10100000);       //0xA0 for writing
  a6:	80 ea       	ldi	r24, 0xA0	; 160
  a8:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Write>
	if(I2C_GetStatus() != 0x18)  // ERROR
  ac:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
  b0:	88 31       	cpi	r24, 0x18	; 24
  b2:	a1 f4       	brne	.+40     	; 0xdc <ExtEPROM_Write+0x4a>
	return 2;
	I2C_Write((unsigned char)(addr));
  b4:	8c 2f       	mov	r24, r28
  b6:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Write>
	if(I2C_GetStatus() != 0x28)  // ERROR
  ba:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
  be:	88 32       	cpi	r24, 0x28	; 40
  c0:	79 f4       	brne	.+30     	; 0xe0 <ExtEPROM_Write+0x4e>
	return 3;
	I2C_Write(data);
  c2:	8d 2f       	mov	r24, r29
  c4:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Write>
	if(I2C_GetStatus() != 0x28)  // ERROR
  c8:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
  cc:	88 32       	cpi	r24, 0x28	; 40
  ce:	51 f4       	brne	.+20     	; 0xe4 <ExtEPROM_Write+0x52>
	return 4;
	I2C_StopBit();
  d0:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_StopBit>
	return 5;				     // SUCCESS
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <ExtEPROM_Write+0x54>
char ExtEPROM_Write(unsigned int addr,unsigned char data)
{
	// Sequence start, Write mode ,slave address ,send data, stop condition
	I2C_StartBit();
	if(I2C_GetStatus() != 0x08)  // ERROR
	return 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	05 c0       	rjmp	.+10     	; 0xe6 <ExtEPROM_Write+0x54>
	I2C_Write(0b10100000);       //0xA0 for writing
	if(I2C_GetStatus() != 0x18)  // ERROR
	return 2;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	03 c0       	rjmp	.+6      	; 0xe6 <ExtEPROM_Write+0x54>
	I2C_Write((unsigned char)(addr));
	if(I2C_GetStatus() != 0x28)  // ERROR
	return 3;
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <ExtEPROM_Write+0x54>
	I2C_Write(data);
	if(I2C_GetStatus() != 0x28)  // ERROR
	return 4;
  e4:	84 e0       	ldi	r24, 0x04	; 4
	I2C_StopBit();
	return 5;				     // SUCCESS
	
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <ExtEPROM_Read>:

char ExtEPROM_Read(unsigned int addr,unsigned char *data)
{
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	18 2f       	mov	r17, r24
  f4:	eb 01       	movw	r28, r22
	// Sequence start, Write mode A0,Send address ,start again,reading mode A1
	//NACK for Ending the read process ,Stop bit to end the comm.
	I2C_StartBit();
  f6:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_StartBit>
	if(I2C_GetStatus() != 0x08)
  fa:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	31 f5       	brne	.+76     	; 0x14e <ExtEPROM_Read+0x62>
		return 1;
	I2C_Write(0b10100000);
 102:	80 ea       	ldi	r24, 0xA0	; 160
 104:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Write>
	if(I2C_GetStatus() != 0x18)
 108:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
 10c:	88 31       	cpi	r24, 0x18	; 24
 10e:	09 f5       	brne	.+66     	; 0x152 <ExtEPROM_Read+0x66>
		return 2;
	I2C_Write((unsigned char)(addr));
 110:	81 2f       	mov	r24, r17
 112:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Write>
	if(I2C_GetStatus() != 0x28)
 116:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
 11a:	88 32       	cpi	r24, 0x28	; 40
 11c:	e1 f4       	brne	.+56     	; 0x156 <ExtEPROM_Read+0x6a>
	return 3;
	I2C_StartBit();
 11e:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_StartBit>
	if(I2C_GetStatus() != 0x10)
 122:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
 126:	80 31       	cpi	r24, 0x10	; 16
 128:	c1 f4       	brne	.+48     	; 0x15a <ExtEPROM_Read+0x6e>
	return 4;
	I2C_Write(0b10100001);		//0xA1 for reading 
 12a:	81 ea       	ldi	r24, 0xA1	; 161
 12c:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Write>
	if(I2C_GetStatus() != 0x40)
 130:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
 134:	80 34       	cpi	r24, 0x40	; 64
 136:	99 f4       	brne	.+38     	; 0x15e <ExtEPROM_Read+0x72>
	return 5;
	*data=I2C_ReadNack();
 138:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_ReadNack>
 13c:	88 83       	st	Y, r24
	if(I2C_GetStatus() != 0x58)
 13e:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_GetStatus>
 142:	88 35       	cpi	r24, 0x58	; 88
 144:	71 f4       	brne	.+28     	; 0x162 <ExtEPROM_Read+0x76>
	return 6;
	I2C_StopBit();
 146:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_StopBit>
	return 7;
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	0b c0       	rjmp	.+22     	; 0x164 <ExtEPROM_Read+0x78>
{
	// Sequence start, Write mode A0,Send address ,start again,reading mode A1
	//NACK for Ending the read process ,Stop bit to end the comm.
	I2C_StartBit();
	if(I2C_GetStatus() != 0x08)
		return 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	09 c0       	rjmp	.+18     	; 0x164 <ExtEPROM_Read+0x78>
	I2C_Write(0b10100000);
	if(I2C_GetStatus() != 0x18)
		return 2;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	07 c0       	rjmp	.+14     	; 0x164 <ExtEPROM_Read+0x78>
	I2C_Write((unsigned char)(addr));
	if(I2C_GetStatus() != 0x28)
	return 3;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	05 c0       	rjmp	.+10     	; 0x164 <ExtEPROM_Read+0x78>
	I2C_StartBit();
	if(I2C_GetStatus() != 0x10)
	return 4;
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	03 c0       	rjmp	.+6      	; 0x164 <ExtEPROM_Read+0x78>
	I2C_Write(0b10100001);		//0xA1 for reading 
	if(I2C_GetStatus() != 0x40)
	return 5;
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	01 c0       	rjmp	.+2      	; 0x164 <ExtEPROM_Read+0x78>
	*data=I2C_ReadNack();
	if(I2C_GetStatus() != 0x58)
	return 6;
 162:	86 e0       	ldi	r24, 0x06	; 6
	I2C_StopBit();
	return 7;
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	08 95       	ret

0000016c <I2C_Init>:
#include <avr/io.h>


void I2C_Init()
{
	TWCR=(1<<TWEN);  //Enable TWI
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	86 bf       	out	0x36, r24	; 54
	TWSR=0x00;
 170:	11 b8       	out	0x01, r1	; 1
	TWBR=0x01;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 b9       	out	0x00, r24	; 0
 176:	08 95       	ret

00000178 <I2C_StartBit>:
}
void I2C_StartBit()
{
	//Enable TWI ,Start Condition 
	TWCR=(1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 178:	84 ea       	ldi	r24, 0xA4	; 164
 17a:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);   //the interrupt flag is set  when a job is finished
 17c:	06 b6       	in	r0, 0x36	; 54
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <I2C_StartBit+0x4>
}
 182:	08 95       	ret

00000184 <I2C_StopBit>:
void I2C_StopBit()
{
	TWCR=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);   //Enable TWI ,STOP Condition
 184:	84 e9       	ldi	r24, 0x94	; 148
 186:	86 bf       	out	0x36, r24	; 54
 188:	08 95       	ret

0000018a <I2C_GetStatus>:
}
unsigned char I2C_GetStatus()
{
	return (TWSR&0xF8);   // the first three bits are reserved ,So we wanna read the other bits
 18a:	81 b1       	in	r24, 0x01	; 1
}
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	08 95       	ret

00000190 <I2C_Write>:
void I2C_Write(unsigned char data)
{
	TWDR=data;
 190:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);
 192:	84 e8       	ldi	r24, 0x84	; 132
 194:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
 196:	06 b6       	in	r0, 0x36	; 54
 198:	07 fe       	sbrs	r0, 7
 19a:	fd cf       	rjmp	.-6      	; 0x196 <I2C_Write+0x6>
}
 19c:	08 95       	ret

0000019e <I2C_ReadNack>:
	while((TWCR&(1<<TWINT))==0);
	return TWDR;
}
unsigned char I2C_ReadNack()
{
	TWCR=(1<<TWEN)|(1<<TWINT);
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
 1a2:	06 b6       	in	r0, 0x36	; 54
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <I2C_ReadNack+0x4>
	return TWDR;
 1a8:	83 b1       	in	r24, 0x03	; 3
}
 1aa:	08 95       	ret

000001ac <__vector_10>:
		}
		pass=0;
	}
}
ISR(SPI_STC_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	cf 93       	push	r28
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	SPI_IntReceive[SPI_count]=SPI_SlaveReceive();
 1d0:	c0 91 d6 00 	lds	r28, 0x00D6
 1d4:	0e 94 0d 03 	call	0x61a	; 0x61a <SPI_SlaveReceive>
 1d8:	ec 2f       	mov	r30, r28
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e0 50       	subi	r30, 0x00	; 0
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	SPI_IntReceive[SPI_count]=SPI_IntReceive[SPI_count]&(0x0F); //Fi Hasshassa fil MSB fi awel reading lel Value bass
 1e2:	e0 91 d6 00 	lds	r30, 0x00D6
 1e6:	a0 91 d6 00 	lds	r26, 0x00D6
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e0 50       	subi	r30, 0x00	; 0
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	a0 50       	subi	r26, 0x00	; 0
 1f4:	bf 4f       	sbci	r27, 0xFF	; 255
 1f6:	8c 91       	ld	r24, X
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	80 83       	st	Z, r24
	SevenSeg_PORT=SPI_IntReceive[SPI_count];
 1fc:	e0 91 d6 00 	lds	r30, 0x00D6
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e0 50       	subi	r30, 0x00	; 0
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	8b bb       	out	0x1b, r24	; 27
	SPI_count++;
 20a:	80 91 d6 00 	lds	r24, 0x00D6
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 d6 00 	sts	0x00D6, r24
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	cf 91       	pop	r28
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_11>:
ISR(USART_RXC_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	cf 93       	push	r28
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	UART_IntReceive[UART_count]=UART_Receive();
 25c:	c0 91 d7 00 	lds	r28, 0x00D7
 260:	0e 94 21 03 	call	0x642	; 0x642 <UART_Receive>
 264:	ec 2f       	mov	r30, r28
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	e4 51       	subi	r30, 0x14	; 20
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	80 83       	st	Z, r24
	UART_count++;
 26e:	80 91 d7 00 	lds	r24, 0x00D7
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 d7 00 	sts	0x00D7, r24
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	cf 91       	pop	r28
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_4>:
ISR(TIMER2_OVF_vect)
{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	if((TIFR&(1<<TOV2))!=0)
 2be:	08 b6       	in	r0, 0x38	; 56
 2c0:	06 fe       	sbrs	r0, 6
 2c2:	26 c0       	rjmp	.+76     	; 0x310 <__vector_4+0x74>
	{
		TIFR=(1<<TOV2);
 2c4:	80 e4       	ldi	r24, 0x40	; 64
 2c6:	88 bf       	out	0x38, r24	; 56
		if(countCW > 0)
 2c8:	80 91 d5 00 	lds	r24, 0x00D5
 2cc:	88 23       	and	r24, r24
 2ce:	31 f0       	breq	.+12     	; 0x2dc <__vector_4+0x40>
		countCW--;
 2d0:	80 91 d5 00 	lds	r24, 0x00D5
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	80 93 d5 00 	sts	0x00D5, r24
 2da:	1a c0       	rjmp	.+52     	; 0x310 <__vector_4+0x74>
		else if(countACW > 0)
 2dc:	80 91 d4 00 	lds	r24, 0x00D4
 2e0:	88 23       	and	r24, r24
 2e2:	b1 f0       	breq	.+44     	; 0x310 <__vector_4+0x74>
		{
			if(countCW == 0)
 2e4:	80 91 d5 00 	lds	r24, 0x00D5
 2e8:	81 11       	cpse	r24, r1
 2ea:	07 c0       	rjmp	.+14     	; 0x2fa <__vector_4+0x5e>
			{
				Motor_AntiCW();
 2ec:	0e 94 02 03 	call	0x604	; 0x604 <Motor_AntiCW>
				countACW--;
 2f0:	80 91 d4 00 	lds	r24, 0x00D4
 2f4:	81 50       	subi	r24, 0x01	; 1
 2f6:	80 93 d4 00 	sts	0x00D4, r24
			}
			if(countACW == 1)
 2fa:	80 91 d4 00 	lds	r24, 0x00D4
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	39 f4       	brne	.+14     	; 0x310 <__vector_4+0x74>
			{
				Motor_Stop();
 302:	0e 94 05 03 	call	0x60a	; 0x60a <Motor_Stop>
				countACW--;
 306:	80 91 d4 00 	lds	r24, 0x00D4
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	80 93 d4 00 	sts	0x00D4, r24
			}
		}
	}
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <INT2_Start>:
	countCW=timeCW;
	countACW=timeACW;
}
void INT2_Start()
{
	setbit(PORTD,6);
 332:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 334:	2f e7       	ldi	r18, 0x7F	; 127
 336:	88 e3       	ldi	r24, 0x38	; 56
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <INT2_Start+0x8>
 342:	00 c0       	rjmp	.+0      	; 0x344 <INT2_Start+0x12>
 344:	00 00       	nop
	_delay_ms(50);
	clrbit(PORTD,6);
 346:	96 98       	cbi	0x12, 6	; 18
 348:	08 95       	ret

0000034a <INT1_Start>:
}
void INT1_Start()
{
	setbit(PORTD,5);
 34a:	95 9a       	sbi	0x12, 5	; 18
 34c:	2f e7       	ldi	r18, 0x7F	; 127
 34e:	88 e3       	ldi	r24, 0x38	; 56
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <INT1_Start+0x8>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <INT1_Start+0x12>
 35c:	00 00       	nop
	_delay_ms(50);
	clrbit(PORTD,5);
 35e:	95 98       	cbi	0x12, 5	; 18
 360:	08 95       	ret

00000362 <main>:
long unsigned int NotUsed = 4;
long unsigned int const ConstNotUsed = 9;


int main()
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	1f 92       	push	r1
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
	Motor_Speed=MAX;
 36c:	8e ef       	ldi	r24, 0xFE	; 254
 36e:	8c bf       	out	0x3c, r24	; 60
	uint8 *WrongPass="\n\rWrong Password Try Again:\0";
	uint8 *PassAccept="\n\rPassword Accepted\n\r\0";
	uint8 count=0;
	uint8 pass=0;
	
	I2C_Init();
 370:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Init>
	SPI_SlaveInit();
 374:	0e 94 08 03 	call	0x610	; 0x610 <SPI_SlaveInit>
	SevenSeg_DDR=0xFF;
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	8a bb       	out	0x1a, r24	; 26
	PWM_Init();
 37c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_Init>
	UART_Init();
 380:	0e 94 16 03 	call	0x62c	; 0x62c <UART_Init>
	Timer2_Init();
 384:	0e 94 11 03 	call	0x622	; 0x622 <Timer2_Init>
	setbit(DDRD,6);
 388:	8e 9a       	sbi	0x11, 6	; 17
	clrbit(PORTD,6);
 38a:	96 98       	cbi	0x12, 6	; 18
	setbit(DDRD,5);
 38c:	8d 9a       	sbi	0x11, 5	; 17
	clrbit(PORTD,5);
 38e:	95 98       	cbi	0x12, 5	; 18
	sei();
 390:	78 94       	sei
	
	ExtEPROM_Write(0x001,50);
 392:	62 e3       	ldi	r22, 0x32	; 50
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 39c:	8f e3       	ldi	r24, 0x3F	; 63
 39e:	9c e9       	ldi	r25, 0x9C	; 156
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <main+0x3e>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x44>
 3a6:	00 00       	nop
	_delay_ms(20);
	ExtEPROM_Write(0x002,49);
 3a8:	61 e3       	ldi	r22, 0x31	; 49
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 3b2:	ef e3       	ldi	r30, 0x3F	; 63
 3b4:	fc e9       	ldi	r31, 0x9C	; 156
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x54>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0x5a>
 3bc:	00 00       	nop
	_delay_ms(20);
	ExtEPROM_Write(0x003,49);
 3be:	61 e3       	ldi	r22, 0x31	; 49
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 3c8:	8f e3       	ldi	r24, 0x3F	; 63
 3ca:	9c e9       	ldi	r25, 0x9C	; 156
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x6a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x70>
 3d2:	00 00       	nop
	_delay_ms(20);
	ExtEPROM_Write(0x004,50);
 3d4:	62 e3       	ldi	r22, 0x32	; 50
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 3de:	ef e3       	ldi	r30, 0x3F	; 63
 3e0:	fc e9       	ldi	r31, 0x9C	; 156
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x80>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x86>
 3e8:	00 00       	nop
	_delay_ms(20);
	ExtEPROM_Write(0x005,49);
 3ea:	61 e3       	ldi	r22, 0x31	; 49
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 3f4:	8f e3       	ldi	r24, 0x3F	; 63
 3f6:	9c e9       	ldi	r25, 0x9C	; 156
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x96>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x9c>
 3fe:	00 00       	nop
	_delay_ms(20);
	ExtEPROM_Write(0x006,49);
 400:	61 e3       	ldi	r22, 0x31	; 49
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 40a:	ef e3       	ldi	r30, 0x3F	; 63
 40c:	fc e9       	ldi	r31, 0x9C	; 156
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <main+0xac>
 412:	00 c0       	rjmp	.+0      	; 0x414 <main+0xb2>
 414:	00 00       	nop
	_delay_ms(20);
	ExtEPROM_Write(0x007,49);
 416:	61 e3       	ldi	r22, 0x31	; 49
 418:	87 e0       	ldi	r24, 0x07	; 7
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 420:	8f e3       	ldi	r24, 0x3F	; 63
 422:	9c e9       	ldi	r25, 0x9C	; 156
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <main+0xc2>
 428:	00 c0       	rjmp	.+0      	; 0x42a <main+0xc8>
 42a:	00 00       	nop
	_delay_ms(20);
	ExtEPROM_Write(0x008,49);
 42c:	61 e3       	ldi	r22, 0x31	; 49
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 49 00 	call	0x92	; 0x92 <ExtEPROM_Write>
 436:	ef e3       	ldi	r30, 0x3F	; 63
 438:	fc e9       	ldi	r31, 0x9C	; 156
 43a:	31 97       	sbiw	r30, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <main+0xd8>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <main+0xde>
 440:	00 00       	nop
 442:	0f 2e       	mov	r0, r31
 444:	f8 ed       	ldi	r31, 0xD8	; 216
 446:	ef 2e       	mov	r14, r31
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ff 2e       	mov	r15, r31
 44c:	f0 2d       	mov	r31, r0
int main()
{
	Motor_Speed=MAX;
	uint8 counter=0;
	uint8 eeData,wrong=0;
	unsigned int addr=0x001;
 44e:	01 e0       	ldi	r16, 0x01	; 1
 450:	10 e0       	ldi	r17, 0x00	; 0
	ExtEPROM_Write(0x008,49);
	_delay_ms(20);
	
	for(count=0;count<9;count++)
	{
		ExtEPROM_Read(addr,&eeData);
 452:	be 01       	movw	r22, r28
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	c8 01       	movw	r24, r16
 45a:	0e 94 76 00 	call	0xec	; 0xec <ExtEPROM_Read>
		arr[count]=eeData;
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	f7 01       	movw	r30, r14
 462:	81 93       	st	Z+, r24
 464:	7f 01       	movw	r14, r30
		addr++;
 466:	0f 5f       	subi	r16, 0xFF	; 255
 468:	1f 4f       	sbci	r17, 0xFF	; 255
	ExtEPROM_Write(0x007,49);
	_delay_ms(20);
	ExtEPROM_Write(0x008,49);
	_delay_ms(20);
	
	for(count=0;count<9;count++)
 46a:	0a 30       	cpi	r16, 0x0A	; 10
 46c:	11 05       	cpc	r17, r1
 46e:	89 f7       	brne	.-30     	; 0x452 <main+0xf0>
	{
		ExtEPROM_Read(addr,&eeData);
		arr[count]=eeData;
		addr++;
	}
	for(count=0;Admin[count]!='\0';count++)
 470:	88 e4       	ldi	r24, 0x48	; 72
	ExtEPROM_Write(0x007,49);
	_delay_ms(20);
	ExtEPROM_Write(0x008,49);
	_delay_ms(20);
	
	for(count=0;count<9;count++)
 472:	10 e0       	ldi	r17, 0x00	; 0
		ExtEPROM_Read(addr,&eeData);
		arr[count]=eeData;
		addr++;
	}
	for(count=0;Admin[count]!='\0';count++)
	UART_Transmit(Admin[count]);
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_Transmit>
	{
		ExtEPROM_Read(addr,&eeData);
		arr[count]=eeData;
		addr++;
	}
	for(count=0;Admin[count]!='\0';count++)
 47a:	1f 5f       	subi	r17, 0xFF	; 255
 47c:	e1 2f       	mov	r30, r17
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	e0 5a       	subi	r30, 0xA0	; 160
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	80 81       	ld	r24, Z
 486:	81 11       	cpse	r24, r1
 488:	f5 cf       	rjmp	.-22     	; 0x474 <__stack+0x15>
	UART_Transmit(Admin[count]);
	for(count=0;EnterPass[count]!='\0';count++)
 48a:	80 e5       	ldi	r24, 0x50	; 80
	{
		ExtEPROM_Read(addr,&eeData);
		arr[count]=eeData;
		addr++;
	}
	for(count=0;Admin[count]!='\0';count++)
 48c:	10 e0       	ldi	r17, 0x00	; 0
	UART_Transmit(Admin[count]);
	for(count=0;EnterPass[count]!='\0';count++)
	UART_Transmit(EnterPass[count]);
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_Transmit>
		arr[count]=eeData;
		addr++;
	}
	for(count=0;Admin[count]!='\0';count++)
	UART_Transmit(Admin[count]);
	for(count=0;EnterPass[count]!='\0';count++)
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	e1 2f       	mov	r30, r17
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	e8 57       	subi	r30, 0x78	; 120
 49c:	ff 4f       	sbci	r31, 0xFF	; 255
 49e:	80 81       	ld	r24, Z
 4a0:	81 11       	cpse	r24, r1
 4a2:	f5 cf       	rjmp	.-22     	; 0x48e <__stack+0x2f>
		if(UART_count==4)
		{
			UART_count=0;
			for(counter=0;counter<4;counter++)
			{
				if(UART_IntReceive[counter]==arr[counter])
 4a4:	0f 2e       	mov	r0, r31
 4a6:	fc ee       	ldi	r31, 0xEC	; 236
 4a8:	8f 2e       	mov	r8, r31
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	9f 2e       	mov	r9, r31
 4ae:	f0 2d       	mov	r31, r0
 4b0:	0f 2e       	mov	r0, r31
 4b2:	f8 ed       	ldi	r31, 0xD8	; 216
 4b4:	af 2e       	mov	r10, r31
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	bf 2e       	mov	r11, r31
 4ba:	f0 2d       	mov	r31, r0
 4bc:	0f 2e       	mov	r0, r31
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	6f 2e       	mov	r6, r31
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	7f 2e       	mov	r7, r31
 4c6:	f0 2d       	mov	r31, r0
 4c8:	51 2c       	mov	r5, r1
 4ca:	0f 2e       	mov	r0, r31
 4cc:	fb ed       	ldi	r31, 0xDB	; 219
 4ce:	2f 2e       	mov	r2, r31
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	3f 2e       	mov	r3, r31
 4d4:	f0 2d       	mov	r31, r0
		if(SPI_count==4)
		{
			SPI_count=0;
			for(counter=0;counter<4;counter++)
			{
				if((uint8)SPI_IntReceive[counter]==(uint8)(arr[counter+4]-48))
 4d6:	0f 2e       	mov	r0, r31
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ef 2e       	mov	r14, r31
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	ff 2e       	mov	r15, r31
 4e0:	f0 2d       	mov	r31, r0
 4e2:	0f 2e       	mov	r0, r31
 4e4:	fd ed       	ldi	r31, 0xDD	; 221
 4e6:	cf 2e       	mov	r12, r31
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	df 2e       	mov	r13, r31
 4ec:	f0 2d       	mov	r31, r0
	for(count=0;EnterPass[count]!='\0';count++)
	UART_Transmit(EnterPass[count]);
	
	while(1)
	{
		if(UART_count==4)
 4ee:	80 91 d7 00 	lds	r24, 0x00D7
 4f2:	84 30       	cpi	r24, 0x04	; 4
 4f4:	a1 f5       	brne	.+104    	; 0x55e <__stack+0xff>
		{
			UART_count=0;
 4f6:	50 92 d7 00 	sts	0x00D7, r5
			for(counter=0;counter<4;counter++)
			{
				if(UART_IntReceive[counter]==arr[counter])
 4fa:	f4 01       	movw	r30, r8
 4fc:	90 81       	ld	r25, Z
 4fe:	f5 01       	movw	r30, r10
 500:	80 81       	ld	r24, Z
 502:	98 13       	cpse	r25, r24
 504:	1d c0       	rjmp	.+58     	; 0x540 <__stack+0xe1>
 506:	ed ee       	ldi	r30, 0xED	; 237
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	90 81       	ld	r25, Z
 50c:	e9 ed       	ldi	r30, 0xD9	; 217
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	98 13       	cpse	r25, r24
 514:	11 c0       	rjmp	.+34     	; 0x538 <__stack+0xd9>
 516:	ee ee       	ldi	r30, 0xEE	; 238
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	90 81       	ld	r25, Z
 51c:	ea ed       	ldi	r30, 0xDA	; 218
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	98 13       	cpse	r25, r24
 524:	0b c0       	rjmp	.+22     	; 0x53c <__stack+0xdd>
 526:	ef ee       	ldi	r30, 0xEF	; 239
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	90 81       	ld	r25, Z
 52c:	f1 01       	movw	r30, r2
 52e:	80 81       	ld	r24, Z
 530:	98 17       	cp	r25, r24
 532:	b9 f0       	breq	.+46     	; 0x562 <__stack+0x103>
				{
					pass++;
 534:	13 e0       	ldi	r17, 0x03	; 3
 536:	05 c0       	rjmp	.+10     	; 0x542 <__stack+0xe3>
 538:	11 e0       	ldi	r17, 0x01	; 1
 53a:	03 c0       	rjmp	.+6      	; 0x542 <__stack+0xe3>
 53c:	12 e0       	ldi	r17, 0x02	; 2
 53e:	01 c0       	rjmp	.+2      	; 0x542 <__stack+0xe3>
		if(UART_count==4)
		{
			UART_count=0;
			for(counter=0;counter<4;counter++)
			{
				if(UART_IntReceive[counter]==arr[counter])
 540:	15 2d       	mov	r17, r5
 542:	8a e0       	ldi	r24, 0x0A	; 10
 544:	05 2d       	mov	r16, r5
					pass++;
				}
				else
				{
					for(count=0;WrongPass[count]!='\0';count++)
					UART_Transmit(WrongPass[count]);
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_Transmit>
				{
					pass++;
				}
				else
				{
					for(count=0;WrongPass[count]!='\0';count++)
 54c:	0f 5f       	subi	r16, 0xFF	; 255
 54e:	e0 2f       	mov	r30, r16
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	e0 56       	subi	r30, 0x60	; 96
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	80 81       	ld	r24, Z
 558:	81 11       	cpse	r24, r1
 55a:	f5 cf       	rjmp	.-22     	; 0x546 <__stack+0xe7>
 55c:	03 c0       	rjmp	.+6      	; 0x564 <__stack+0x105>
 55e:	15 2d       	mov	r17, r5
 560:	01 c0       	rjmp	.+2      	; 0x564 <__stack+0x105>
			UART_count=0;
			for(counter=0;counter<4;counter++)
			{
				if(UART_IntReceive[counter]==arr[counter])
				{
					pass++;
 562:	14 e0       	ldi	r17, 0x04	; 4
					UART_Transmit(WrongPass[count]);
					break;
				}
			}
		}
		if(SPI_count==4)
 564:	80 91 d6 00 	lds	r24, 0x00D6
 568:	84 30       	cpi	r24, 0x04	; 4
 56a:	19 f5       	brne	.+70     	; 0x5b2 <__stack+0x153>
		{
			SPI_count=0;
 56c:	50 92 d6 00 	sts	0x00D6, r5
			for(counter=0;counter<4;counter++)
			{
				if((uint8)SPI_IntReceive[counter]==(uint8)(arr[counter+4]-48))
 570:	ec ed       	ldi	r30, 0xDC	; 220
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	80 53       	subi	r24, 0x30	; 48
 578:	f7 01       	movw	r30, r14
 57a:	90 81       	ld	r25, Z
 57c:	98 17       	cp	r25, r24
 57e:	99 f1       	breq	.+102    	; 0x5e6 <__stack+0x187>
 580:	09 c0       	rjmp	.+18     	; 0x594 <__stack+0x135>
 582:	9d 91       	ld	r25, X+
 584:	81 91       	ld	r24, Z+
 586:	80 53       	subi	r24, 0x30	; 48
 588:	98 13       	cpse	r25, r24
 58a:	04 c0       	rjmp	.+8      	; 0x594 <__stack+0x135>
				pass++;
 58c:	1f 5f       	subi	r17, 0xFF	; 255
			}
		}
		if(SPI_count==4)
		{
			SPI_count=0;
			for(counter=0;counter<4;counter++)
 58e:	12 13       	cpse	r17, r18
 590:	f8 cf       	rjmp	.-16     	; 0x582 <__stack+0x123>
 592:	0f c0       	rjmp	.+30     	; 0x5b2 <__stack+0x153>
			{
				if((uint8)SPI_IntReceive[counter]==(uint8)(arr[counter+4]-48))
				pass++;
 594:	8a e0       	ldi	r24, 0x0A	; 10
 596:	05 2d       	mov	r16, r5
				else
				{
					for(count=0;WrongPass[count]!='\0';count++)
					UART_Transmit(WrongPass[count]);
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_Transmit>
			{
				if((uint8)SPI_IntReceive[counter]==(uint8)(arr[counter+4]-48))
				pass++;
				else
				{
					for(count=0;WrongPass[count]!='\0';count++)
 59e:	0f 5f       	subi	r16, 0xFF	; 255
 5a0:	e0 2f       	mov	r30, r16
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	e0 56       	subi	r30, 0x60	; 96
 5a6:	ff 4f       	sbci	r31, 0xFF	; 255
 5a8:	80 81       	ld	r24, Z
 5aa:	81 11       	cpse	r24, r1
 5ac:	f5 cf       	rjmp	.-22     	; 0x598 <__stack+0x139>
					UART_Transmit(WrongPass[count]);
					INT1_Start();
 5ae:	0e 94 a5 01 	call	0x34a	; 0x34a <INT1_Start>
					break;
				}
			}
		}
		if(pass == 4)
 5b2:	14 30       	cpi	r17, 0x04	; 4
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <__stack+0x159>
 5b6:	9b cf       	rjmp	.-202    	; 0x4ee <__stack+0x8f>
		{
			for(count=0;PassAccept[count]!='\0';count++)
 5b8:	8a e0       	ldi	r24, 0x0A	; 10
					INT1_Start();
					break;
				}
			}
		}
		if(pass == 4)
 5ba:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(count=0;PassAccept[count]!='\0';count++)
			UART_Transmit(PassAccept[count]);
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_Transmit>
				}
			}
		}
		if(pass == 4)
		{
			for(count=0;PassAccept[count]!='\0';count++)
 5c2:	1f 5f       	subi	r17, 0xFF	; 255
 5c4:	e1 2f       	mov	r30, r17
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	e3 54       	subi	r30, 0x43	; 67
 5ca:	ff 4f       	sbci	r31, 0xFF	; 255
 5cc:	80 81       	ld	r24, Z
 5ce:	81 11       	cpse	r24, r1
 5d0:	f5 cf       	rjmp	.-22     	; 0x5bc <__stack+0x15d>
			UART_Transmit(PassAccept[count]);
			Motor_CW();
 5d2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Motor_CW>
		}
	}
}
void SetTimeCW_ACW(uint8 timeCW,uint8 timeACW)
{
	countCW=timeCW;
 5d6:	8c e3       	ldi	r24, 0x3C	; 60
 5d8:	80 93 d5 00 	sts	0x00D5, r24
	countACW=timeACW;
 5dc:	80 93 d4 00 	sts	0x00D4, r24
		{
			for(count=0;PassAccept[count]!='\0';count++)
			UART_Transmit(PassAccept[count]);
			Motor_CW();
			SetTimeCW_ACW(60,60);
			INT2_Start();
 5e0:	0e 94 99 01 	call	0x332	; 0x332 <INT2_Start>
 5e4:	71 cf       	rjmp	.-286    	; 0x4c8 <__stack+0x69>
 5e6:	d3 01       	movw	r26, r6
 5e8:	f6 01       	movw	r30, r12
 5ea:	24 e0       	ldi	r18, 0x04	; 4
 5ec:	21 0f       	add	r18, r17
		{
			SPI_count=0;
			for(counter=0;counter<4;counter++)
			{
				if((uint8)SPI_IntReceive[counter]==(uint8)(arr[counter+4]-48))
				pass++;
 5ee:	1f 5f       	subi	r17, 0xFF	; 255
 5f0:	c8 cf       	rjmp	.-112    	; 0x582 <__stack+0x123>

000005f2 <PWM_Init>:
#include <util/delay.h>
#include "PWM.h"

void PWM_Init()
{
	setbit(DDRB,0);    //IN1
 5f2:	b8 9a       	sbi	0x17, 0	; 23
	setbit(DDRB,1);    //IN1
 5f4:	b9 9a       	sbi	0x17, 1	; 23
	// Fast PWM mode & clear OC0 on Comare match &  clock/1024 prescaler
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS02)|(1<<CS00);
 5f6:	8d e6       	ldi	r24, 0x6D	; 109
 5f8:	83 bf       	out	0x33, r24	; 51
	setbit(DDRB,3);   //Enable
 5fa:	bb 9a       	sbi	0x17, 3	; 23
 5fc:	08 95       	ret

000005fe <Motor_CW>:
}
void Motor_CW()
{
	setbit(Motor_Ports,Right);  //pin PB0=1
 5fe:	c1 9a       	sbi	0x18, 1	; 24
	clrbit(Motor_Ports,Left);   //pin PB1=0
 600:	c0 98       	cbi	0x18, 0	; 24
 602:	08 95       	ret

00000604 <Motor_AntiCW>:
}
void Motor_AntiCW()
{
	setbit(Motor_Ports,Left);  //pin PB0=0
 604:	c0 9a       	sbi	0x18, 0	; 24
	clrbit(Motor_Ports,Right); //pin PB1=1
 606:	c1 98       	cbi	0x18, 1	; 24
 608:	08 95       	ret

0000060a <Motor_Stop>:
}
void Motor_Stop()
{
	clrbit(Motor_Ports,Left);  //pin PB0=0
 60a:	c0 98       	cbi	0x18, 0	; 24
	clrbit(Motor_Ports,Right); //pin PB1=0
 60c:	c1 98       	cbi	0x18, 1	; 24
 60e:	08 95       	ret

00000610 <SPI_SlaveInit>:
#include <avr/io.h>
#include "SPI.h"
void SPI_SlaveInit(void)
{
	DDR_SPI = (1<<DD_MISO);     // MISO pin is output
 610:	80 e4       	ldi	r24, 0x40	; 64
 612:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<SPIE); // SPI Enable & interrupt Enable
 614:	80 ec       	ldi	r24, 0xC0	; 192
 616:	8d b9       	out	0x0d, r24	; 13
 618:	08 95       	ret

0000061a <SPI_SlaveReceive>:
}
char SPI_SlaveReceive(void)
{
	while(!(SPSR & (1<<SPIF)))
 61a:	77 9b       	sbis	0x0e, 7	; 14
 61c:	fe cf       	rjmp	.-4      	; 0x61a <SPI_SlaveReceive>
	;                                  // wait until Interrupt flag is set indicating that the received is complete
	return SPDR;					  // return the received data 
 61e:	8f b1       	in	r24, 0x0f	; 15
}
 620:	08 95       	ret

00000622 <Timer2_Init>:

typedef unsigned char uint8;
void Timer2_Init()
{
	//Normal mode ,set OC2 on compare match , clk/1024
	TCCR2=(1<<COM21)|(1<<COM20)|(1<<CS20)|(1<<CS21)|(1<<CS22);
 622:	87 e3       	ldi	r24, 0x37	; 55
 624:	85 bd       	out	0x25, r24	; 37
	TIMSK=(1<<TOIE2); //Overflow  interrupt Enable
 626:	80 e4       	ldi	r24, 0x40	; 64
 628:	89 bf       	out	0x39, r24	; 57
 62a:	08 95       	ret

0000062c <UART_Init>:
#include <avr/io.h>

void UART_Init()
{
	UBRRL=0b00110011;                       //UBRRL = 51 For 1 MHz Crystal and 1200 baud rate
 62c:	83 e3       	ldi	r24, 0x33	; 51
 62e:	89 b9       	out	0x09, r24	; 9
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);   // Enable RX and TX and RX complete interrupt
 630:	88 e9       	ldi	r24, 0x98	; 152
 632:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); // Character size 8 bits
 634:	86 e8       	ldi	r24, 0x86	; 134
 636:	80 bd       	out	0x20, r24	; 32
 638:	08 95       	ret

0000063a <UART_Transmit>:
	
}
void UART_Transmit(unsigned char UART_data)
{
	while((UCSRA&(1<<UDRE))==0);   // Check if the UDR is empty
 63a:	5d 9b       	sbis	0x0b, 5	; 11
 63c:	fe cf       	rjmp	.-4      	; 0x63a <UART_Transmit>
	UDR=UART_data;
 63e:	8c b9       	out	0x0c, r24	; 12
 640:	08 95       	ret

00000642 <UART_Receive>:
}
unsigned char UART_Receive()
{
	while((UCSRA&(1<<RXC))==0);  // check data is received
 642:	5f 9b       	sbis	0x0b, 7	; 11
 644:	fe cf       	rjmp	.-4      	; 0x642 <UART_Receive>
	return UDR;
 646:	8c b1       	in	r24, 0x0c	; 12
 648:	08 95       	ret

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>
